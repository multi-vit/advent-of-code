/*
--- Day 9: Rope Bridge ---
This rope bridge creaks as you walk along it. You aren't sure how old it is, or whether it can even support your weight.

It seems to support the Elves just fine, though. The bridge spans a gorge which was carved out by the massive river far below you.

You step carefully; as you do, the ropes stretch and twist. You decide to distract yourself by modeling rope physics; maybe you can even figure out where not to step.

Consider a rope with a knot at each end; these knots mark the head and the tail of the rope. If the head moves far enough away from the tail, the tail is pulled toward the head.

Due to nebulous reasoning involving Planck lengths, you should be able to model the positions of the knots on a two-dimensional grid. Then, by following a hypothetical series of motions (your puzzle input) for the head, you can determine how the tail will move.

Due to the aforementioned Planck lengths, the rope must be quite short; in fact, the head (H) and tail (T) must always be touching (diagonally adjacent and even overlapping both count as touching):

....
.TH.
....

....
.H..
..T.
....

...
.H. (H covers T)
...
If the head is ever two steps directly up, down, left, or right from the tail, the tail must also move one step in that direction so it remains close enough:

.....    .....    .....
.TH.. -> .T.H. -> ..TH.
.....    .....    .....

...    ...    ...
.T.    .T.    ...
.H. -> ... -> .T.
...    .H.    .H.
...    ...    ...
Otherwise, if the head and tail aren't touching and aren't in the same row or column, the tail always moves one step diagonally to keep up:

.....    .....    .....
.....    ..H..    ..H..
..H.. -> ..... -> ..T..
.T...    .T...    .....
.....    .....    .....

.....    .....    .....
.....    .....    .....
..H.. -> ...H. -> ..TH.
.T...    .T...    .....
.....    .....    .....
You just need to work out where the tail goes as the head follows a series of motions. Assume the head and the tail both start at the same position, overlapping.

For example:

R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2
This series of motions moves the head right four steps, then up four steps, then left three steps, then down one step, and so on. After each step, you'll need to update the position of the tail if the step means the head is no longer adjacent to the tail. Visually, these motions occur as follows (s marks the starting position as a reference point):

== Initial State ==

......
......
......
......
H.....  (H covers T, s)

== R 4 ==

......
......
......
......
TH....  (T covers s)

......
......
......
......
sTH...

......
......
......
......
s.TH..

......
......
......
......
s..TH.

== U 4 ==

......
......
......
....H.
s..T..

......
......
....H.
....T.
s.....

......
....H.
....T.
......
s.....

....H.
....T.
......
......
s.....

== L 3 ==

...H..
....T.
......
......
s.....

..HT..
......
......
......
s.....

.HT...
......
......
......
s.....

== D 1 ==

..T...
.H....
......
......
s.....

== R 4 ==

..T...
..H...
......
......
s.....

..T...
...H..
......
......
s.....

......
...TH.
......
......
s.....

......
....TH
......
......
s.....

== D 1 ==

......
....T.
.....H
......
s.....

== L 5 ==

......
....T.
....H.
......
s.....

......
....T.
...H..
......
s.....

......
......
..HT..
......
s.....

......
......
.HT...
......
s.....

......
......
HT....
......
s.....

== R 2 ==

......
......
.H....  (H covers T)
......
s.....

......
......
.TH...
......
s.....
After simulating the rope, you can count up all of the positions the tail visited at least once. In this diagram, s again marks the starting position (which the tail also visited) and # marks other positions the tail visited:

..##..
...##.
.####.
....#.
s###..
So, there are 13 positions the tail visited at least once.

Simulate your complete hypothetical series of motions. How many positions does the tail of the rope visit at least once?

PLAN
Also need to keep track of grid references tail visited so we don't duplicate count if we've been there before
Keep track using a grid? - array of arrays similar to tuple? Start at [0,0] so make sure it starts with this
But will need separate array of arrays for head and tail as they won't go to same space after 1st move
Both head and tail start at same square
Iterate through move sequence
Moves are for the head
Then need to sort out tail following the head, if needed
Push both grid references to moveArrays

After you've sorted moves:
Need to calculate unique spaces that tail visited:
New array containing unique grid references from tailMoveArray 
Return length of unique array
*/

const fs = require("fs");

let data;

try {
  data = fs.readFileSync("./day-9-input.txt", "utf8");
  // console.log(data);
} catch (err) {
  console.error(err);
}

let instructions = data.split("\r\n");
// console.log(instructions);

let headMoveArray = [[0, 0]];
let tailMoveArray = [[0, 0]];

for (let i = 0; i < instructions.length; i++) {
  let currentMove = instructions[i].split(" ");
  // console.log(`Current move: ${currentMove}`);
  for (let j = 0; j < currentMove[1]; j++) {
    let headPosition = [...headMoveArray[headMoveArray.length - 1]];
    let tailPosition = [...tailMoveArray[tailMoveArray.length - 1]];
    // console.log(`Previous grid ref: ${newPosition}`);
    switch (currentMove[0]) {
      case "R":
        headPosition[0] += 1;
        // console.log(`New Head Position is: ${headPosition}`);
        headMoveArray.push(headPosition);
        if (
          Math.abs(headPosition[0] - tailPosition[0]) < 2 &&
          Math.abs(headPosition[1] - tailPosition[1]) < 2
        ) {
          //   console.log("No tail movement needed ");
        } else {
          // Move tail right in any case as too far away
          tailPosition[0] += 1;
          // If they are not in the same column, tail needs to move diagonally so align to same column (accounts for up or down)
          if (Math.abs(headPosition[1] !== tailPosition[1])) {
            tailPosition[1] = headPosition[1];
          }
          // console.log(`New Tail Position is: ${tailPosition}`);
          tailMoveArray.push(tailPosition);
        }
        break;
      case "L":
        headPosition[0] -= 1;
        // console.log(`New Head Position is: ${headPosition}`);
        headMoveArray.push(headPosition);
        if (
          Math.abs(headPosition[0] - tailPosition[0]) < 2 &&
          Math.abs(headPosition[1] - tailPosition[1]) < 2
        ) {
          // console.log("No tail movement needed ");
        } else {
          // Move tail left in any case as too far away
          tailPosition[0] -= 1;
          // If they are not in the same column, tail needs to move diagonally so align to same column (accounts for up or down)
          if (Math.abs(headPosition[1] !== tailPosition[1])) {
            tailPosition[1] = headPosition[1];
          }
          // console.log(`New Tail Position is: ${tailPosition}`);
          tailMoveArray.push(tailPosition);
        }
        break;
      case "U":
        headPosition[1] += 1;
        // console.log(`New Head Position is: ${headPosition}`);
        headMoveArray.push(headPosition);
        if (
          Math.abs(headPosition[0] - tailPosition[0]) < 2 &&
          Math.abs(headPosition[1] - tailPosition[1]) < 2
        ) {
          // console.log("No tail movement needed ");
        } else {
          // Move tail up in any case as too far away
          tailPosition[1] += 1;
          // If they are not in the same row, tail needs to move diagonally so align to same row (accounts for left or right)
          if (Math.abs(headPosition[0] !== tailPosition[0])) {
            tailPosition[0] = headPosition[0];
          }
          // console.log(`New Tail Position is: ${tailPosition}`);
          tailMoveArray.push(tailPosition);
        }
        break;
      case "D":
        headPosition[1] -= 1;
        // console.log(`New Head Position is: ${headPosition}`);
        headMoveArray.push(headPosition);
        if (
          Math.abs(headPosition[0] - tailPosition[0]) < 2 &&
          Math.abs(headPosition[1] - tailPosition[1]) < 2
        ) {
          //   console.log("No tail movement needed ");
        } else {
          // Move tail down in any case as too far away
          tailPosition[1] -= 1;
          // If they are not in the same row, tail needs to move diagonally so align to same row (accounts for left or right)
          if (Math.abs(headPosition[0] !== tailPosition[0])) {
            tailPosition[0] = headPosition[0];
          }
          //   console.log(`New Tail Position is: ${tailPosition}`);
          tailMoveArray.push(tailPosition);
        }
        break;

      default:
        console.log(`There was a problem processing the move direction`);
    }
  }
}

// console.log("Final headMoveArray:");
// console.log(headMoveArray);
// console.log("Final tailMoveArray:");
// console.log(tailMoveArray);

const uniqueTailArray = Array.from(
  new Set(tailMoveArray.map(JSON.stringify)),
  JSON.parse
);
// console.log(uniqueTailArray);
console.log(uniqueTailArray.length);
